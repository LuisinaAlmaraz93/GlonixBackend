const express = require("express");
const bodyParser = require("body-parser");
const pool = require("./db"); // Conexi√≥n a la base de datos
const jwt = require("jsonwebtoken"); // Importamos jsonwebtoken para los tokens
const SECRET_KEY = "mi_secreto_super_seguro"; // üî• Cambia esto por una clave segura
const bcrypt = require("bcrypt");

const app = express();
app.use(bodyParser.json());


// Env√≠o de correos con contrase√±as a suscriptores

const nodemailer = require("nodemailer"); // Importamos nodemailer

// Configurar transporte de correo
const transporter = nodemailer.createTransport({
    service: "gmail",  
    auth: {
        user: "luisina.almaraz.3@gmail.com",
        pass: "aogzqohrgkogfzjl"
    }
});

// üîπ Verificamos si el transporte de nodemailer est√° configurado correctamente
transporter.verify((error, success) => {
    if (error) {
        console.error("‚ùå Error en la configuraci√≥n de nodemailer:", error);
    } else {
        console.log("‚úÖ Nodemailer est√° listo para enviar correos.");
    }
});



// Funci√≥n para enviar el correo con la contrase√±a


const enviarCorreo = async (email, password) => {
    console.log(`üì§ Intentando enviar correo a: ${email}`); 

    const mailOptions = {
        from: "luisina.almaraz.3@gmail.com",
        to: email,
        subject: "Bienvenido a Glonixia - Tu contrase√±a de acceso",
        text: `Hola, gracias por suscribirte a Glonixia. Tu contrase√±a de acceso es: ${password}.
        
        Recuerda cambiarla cuando inicies sesi√≥n en la plataforma.`
    };

    try {
        const info = await transporter.sendMail(mailOptions);
        console.log(`üìß Correo enviado a ${email} con respuesta: ${info.response}`);
    } catch (error) {
        console.error("‚ùå Error enviando el correo:", error);
    }
};




// Ruta de prueba para verificar que el servidor funciona
app.get("/", (req, res) => {
    res.send("‚úÖ El servidor est√° funcionando correctamente.");
});

// Crear la tabla si no existe
async function createTable() {
    const query = `
        CREATE TABLE IF NOT EXISTS subscriptions (
            id SERIAL PRIMARY KEY,
            paypal_id VARCHAR(50) UNIQUE NOT NULL,
            status VARCHAR(20) NOT NULL,
            plan_id VARCHAR(50),
            subscriber_email VARCHAR(100) UNIQUE NOT NULL,
            password TEXT,  -- Agregamos el campo de contrase√±a
            start_time TIMESTAMP
        );
    `;
    await pool.query(query);
    console.log("‚úÖ Tabla de suscripciones creada o actualizada.");
}

createTable();

// ‚úÖ **Ruta para el webhook de PayPal**
const crypto = require("crypto"); // Importamos crypto para generar contrase√±as aleatorias

app.post("/paypal/webhook", async (req, res) => {
    console.log("‚ö° Webhook recibido:", req.body);

    const eventType = req.body.event_type;

    if (eventType === "BILLING.SUBSCRIPTION.ACTIVATED") {
        const data = req.body.resource;
        const randomPassword = crypto.randomBytes(8).toString("hex"); // Generamos una contrase√±a aleatoria
        try {
            const hashedPassword = await bcrypt.hash(randomPassword, 10); // Encripta la contrase√±a
        
            console.log("üîç Verificando datos antes de guardar en BD:");
            console.log("üìå Contrase√±a original:", randomPassword);
            console.log("üîí Contrase√±a cifrada:", hashedPassword);
            console.log("üìå ID de PayPal:", data.id);
            console.log("üìå Email:", data.subscriber.email_address);
            console.log("üìå Plan ID:", data.plan_id);
            console.log("üìå Fecha de inicio:", data.start_time);
            console.log("üìå Tipo de dato de hashedPassword:", typeof hashedPassword); // üî• Esto nos dir√° si est√° bien formado
            
            
            // ‚ùó Verificar si hashedPassword es `null` o `undefined`
            if (!hashedPassword || typeof hashedPassword !== "string") {
                console.error("‚ùå ERROR: hashedPassword es nulo, indefinido o no es un string");
                return res.status(500).json({ error: "No se pudo generar la contrase√±a cifrada" });
            }
            
            // Guardar en la base de datos
            const result = await pool.query(
                `INSERT INTO subscriptions (paypal_id, status, plan_id, subscriber_email, password, start_time) 
                 VALUES ($1, $2, $3, $4, $5, $6)
                 ON CONFLICT (subscriber_email) 
                 DO UPDATE SET password = $5, status = $2, plan_id = $3, start_time = $6
                 RETURNING *`,
                [data.id, data.status, data.plan_id, data.subscriber.email_address, hashedPassword, data.start_time]
            );
            
    
            console.log(`‚úÖ Suscripci√≥n guardada. Contrase√±a generada para ${data.subscriber.email_address}: ${randomPassword}`);
    
            // üìß Enviar la contrase√±a por correo al usuario
            await enviarCorreo(data.subscriber.email_address, randomPassword);
            console.log(`‚úÖ Correo enviado exitosamente a ${data.subscriber.email_address}`);

            // üìß Enviar una copia del correo a tu direcci√≥n personal (opcional)
            await enviarCorreo("luisina.almaraz.3@gmail.com", `Contrase√±a generada para ${data.subscriber.email_address}: ${randomPassword}`);
            console.log("‚úÖ Copia de correo enviada a admin.");
    
        } catch (error) {
            console.error("‚ùå Error guardando la suscripci√≥n o enviando correo:", error);
        }
    }

    res.sendStatus(200); // Confirmar recepci√≥n del webhook
});




// ‚úÖ **Ruta para generar el token JWT**
app.post("/login", async (req, res) => {
    const { email } = req.body; // Recibe el email desde el frontend

    try {
        // Verificar si el email existe en la base de datos
        let result = await pool.query("SELECT * FROM subscriptions WHERE subscriber_email = $1", [email]);

        if (result.rows.length === 0) {
            return res.status(401).json({ message: "Acceso denegado: No est√°s suscripto." });
        }

        // üîπ Si el email existe, creamos el token JWT
        const token = jwt.sign({ email }, SECRET_KEY, { expiresIn: "1h" });

        res.json({ token }); // Enviamos el token al usuario
    } catch (error) {
        console.error("‚ùå Error en el login:", error);
        res.status(500).json({ message: "Error en el servidor" });
    }
});

// ‚úÖ **Ruta para que los usuarios configuren su contrase√±a**



app.post("/register", async (req, res) => {
    const { email, password } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(password, 10); // üîπ Encriptamos la contrase√±a

        let result = await pool.query(
            "UPDATE subscriptions SET password = $1 WHERE subscriber_email = $2 RETURNING *",
            [hashedPassword, email]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ message: "Usuario no encontrado." });
        }

        res.json({ message: "Contrase√±a actualizada con √©xito." });
    } catch (error) {
        console.error("‚ùå Error en la actualizaci√≥n de contrase√±a:", error);
        res.status(500).json({ message: "Error en el servidor" });
    }
});

// ‚úÖ **Middleware para verificar token**
const verificarToken = (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
        return res.status(403).json({ message: "Acceso denegado: No tienes token." });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY); // Verificamos el token
        req.user = decoded; // Guardamos la info del usuario en la petici√≥n
        next(); // üîπ Si el token es v√°lido, dejamos continuar la petici√≥n
    } catch (error) {
        return res.status(401).json({ message: "Token inv√°lido o expirado." });
    }
};

// ‚úÖ **Ruta protegida para `Members.html`**
app.get("/members", verificarToken, (req, res) => {
    res.sendFile(__dirname + "/Members.html"); // Env√≠a el archivo Members.html si el token es v√°lido
});

// ‚úÖ NUEVA RUTA PARA VER LAS SUSCRIPCIONES DESDE EL NAVEGADOR
app.get("/ver-suscripciones", async (req, res) => {
    try {
        const result = await pool.query("SELECT * FROM subscriptions");
        res.json(result.rows); // Muestra los datos en JSON
    } catch (error) {
        console.error("‚ùå Error consultando suscripciones:", error);
        res.status(500).send("Error consultando la base de datos");
    }
});

// üìå Diagn√≥stico: Ver todas las rutas registradas en Express
app._router.stack.forEach((r) => {
    if (r.route && r.route.path) {
        console.log(`üõ† Ruta registrada: ${r.route.path}`);
    }
});

// üîπ Prueba de env√≠o de correo al iniciar el servidor
async function testEmail() {
    try {
        const randomPassword = crypto.randomBytes(8).toString("hex"); // Genera una contrase√±a aleatoria
await enviarCorreo("luisina.almaraz.3@gmail.com", randomPassword);

        console.log("‚úÖ Prueba de correo enviada");
    } catch (error) {
        console.error("‚ùå Error en la prueba de correo:", error);
    }
}

testEmail(); // üîπ Llamamos la funci√≥n al iniciar el servidor


// Iniciar el servidor en el puerto 8080 (Render usa este puerto)
const PORT = process.env.PORT || 8080;
app.listen(PORT, "0.0.0.0", () => {
    console.log(`‚úÖ Servidor corriendo en el puerto ${PORT}`);
});

// Ruta para recuperar contrase√±a
app.post("/forgot-password", async (req, res) => {
    const { email } = req.body;

    try {
        // Buscar al usuario en la base de datos
        const result = await pool.query("SELECT * FROM subscriptions WHERE subscriber_email = $1", [email]);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: "Este correo no est√° registrado." });
        }

        // Generar una nueva contrase√±a aleatoria
        const randomPassword = crypto.randomBytes(8).toString("hex");
        const hashedPassword = await bcrypt.hash(randomPassword, 10);  // Encriptar la nueva contrase√±a

        // Actualizar la base de datos con la nueva contrase√±a
        await pool.query("UPDATE subscriptions SET password = $1 WHERE subscriber_email = $2", [hashedPassword, email]);

        // Enviar la nueva contrase√±a por correo
        await enviarCorreo(email, randomPassword);

        res.json({ message: "Te hemos enviado un enlace para recuperar tu contrase√±a." });
    } catch (error) {
        console.error("‚ùå Error recuperando contrase√±a:", error);
        res.status(500).json({ message: "Error en el servidor." });
    }
});


// Ruta para cambiar la contrase√±a
app.post("/change-password", async (req, res) => {
    const { newPassword, confirmPassword } = req.body;
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
        return res.status(403).json({ message: "No tienes permiso para cambiar la contrase√±a." });
    }

    // Validar que las contrase√±as coincidan
    if (newPassword !== confirmPassword) {
        return res.status(400).json({ message: "Las contrase√±as no coinciden." });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        const email = decoded.email;

        // Verificar si el usuario ya cambi√≥ la contrase√±a antes
        const userCheck = await pool.query("SELECT password FROM subscriptions WHERE subscriber_email = $1", [email]);

        if (userCheck.rows.length === 0) {
            return res.status(404).json({ message: "Usuario no encontrado." });
        }

        const currentPassword = userCheck.rows[0].password;

        // Si el usuario ya cambi√≥ la contrase√±a antes (es decir, la contrase√±a est√° encriptada)
        if (currentPassword.startsWith("$2b$")) { 
            return res.status(403).json({ message: "Ya cambiaste tu contrase√±a antes." });
        }

        // Encriptar la nueva contrase√±a
        const hashedNewPassword = await bcrypt.hash(newPassword, 10);

        console.log("üõ† Hashed Password antes de la consulta:", hashedPassword);


        // Actualizar la base de datos
        const result = await pool.query(
            "UPDATE subscriptions SET password = $1 WHERE subscriber_email = $2 RETURNING *",
            [hashedNewPassword, email]
        );

        // Verificar si la contrase√±a se actualiz√≥ correctamente
        if (result.rowCount === 0) {
            return res.status(500).json({ message: "No se pudo actualizar la contrase√±a." });
        }

        console.log(`‚úÖ Contrase√±a actualizada en la BD para: ${email}`);
        res.json({ message: "Contrase√±a cambiada exitosamente. Inicia sesi√≥n con tu nueva contrase√±a." });

    } catch (error) {
        console.error("‚ùå Error al cambiar la contrase√±a:", error);
        res.status(500).json({ message: "Error en el servidor." });
    }
});
